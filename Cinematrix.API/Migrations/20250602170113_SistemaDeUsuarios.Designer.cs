// <auto-generated />
using System;
using Cinematrix.API.Datos;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Cinematrix.API.Migrations
{
    [DbContext(typeof(CinematrixContext))]
    [Migration("20250602170113_SistemaDeUsuarios")]
    partial class SistemaDeUsuarios
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Cinematrix.API.Entidades.Compra", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Autorizacion")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("")
                        .HasColumnName("autorizacion");

                    b.Property<string>("Canal")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("canal");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("EN_PROCESO")
                        .HasColumnName("estado");

                    b.Property<DateTime?>("Fin")
                        .HasColumnType("datetime")
                        .HasColumnName("fin");

                    b.Property<decimal?>("Importe")
                        .HasColumnType("decimal(5, 2)")
                        .HasColumnName("importe");

                    b.Property<DateTime>("Inicio")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("inicio")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Medio")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("")
                        .HasColumnName("medio");

                    b.Property<int>("SesionId")
                        .HasColumnType("int")
                        .HasColumnName("sesion_id");

                    b.HasKey("Id")
                        .HasName("PK__Compra__3213E83F8A962A2B");

                    b.HasIndex("SesionId");

                    b.ToTable("Compra", (string)null);
                });

            modelBuilder.Entity("Cinematrix.API.Entidades.Ocupacion", b =>
                {
                    b.Property<int>("SesionId")
                        .HasColumnType("int")
                        .HasColumnName("sesion_id");

                    b.Property<string>("Butaca")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("butaca");

                    b.Property<int>("CompraId")
                        .HasColumnType("int")
                        .HasColumnName("compra_id");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("RESERVADA")
                        .HasColumnName("estado");

                    b.Property<string>("TarifaNombre")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("tarifa_nombre");

                    b.HasKey("SesionId", "Butaca")
                        .HasName("PK__Ocupacio__4EA6BB6DF73B9873");

                    b.HasIndex("CompraId");

                    b.HasIndex("TarifaNombre");

                    b.ToTable("Ocupacion", (string)null);
                });

            modelBuilder.Entity("Cinematrix.API.Entidades.Pelicula", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Anio")
                        .HasColumnType("int")
                        .HasColumnName("anio");

                    b.Property<string>("Calificacion")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)")
                        .HasColumnName("calificacion");

                    b.Property<string>("Categoria")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("categoria");

                    b.Property<int?>("Duracion")
                        .HasColumnType("int")
                        .HasColumnName("duracion");

                    b.Property<string>("Formato")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("2D ESPAÑOL")
                        .HasColumnName("formato");

                    b.Property<string>("Imagen")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("imagen");

                    b.Property<string>("Poster")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("poster");

                    b.Property<string>("Sinopsis")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("sinopsis");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("titulo");

                    b.Property<string>("Trailer")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("trailer");

                    b.HasKey("Id")
                        .HasName("PK__Pelicula__3213E83F1E396DEF");

                    b.ToTable("Pelicula", (string)null);
                });

            modelBuilder.Entity("Cinematrix.API.Entidades.Rol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("nombre");

                    b.HasKey("Id")
                        .HasName("PK__Rol__3213E83F9FE5E9A8");

                    b.ToTable("Rol", (string)null);
                });

            modelBuilder.Entity("Cinematrix.API.Entidades.Sala", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Aforo")
                        .HasColumnType("int")
                        .HasColumnName("aforo");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("nombre");

                    b.Property<string>("Plano")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)")
                        .HasColumnName("plano");

                    b.HasKey("Id")
                        .HasName("PK__Sala__3213E83F3EDF4A3C");

                    b.ToTable("Sala", (string)null);
                });

            modelBuilder.Entity("Cinematrix.API.Entidades.Sesion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Estado")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("PROGRAMADA")
                        .HasColumnName("estado");

                    b.Property<DateTime>("Fin")
                        .HasColumnType("datetime")
                        .HasColumnName("fin");

                    b.Property<DateTime>("Inicio")
                        .HasColumnType("datetime")
                        .HasColumnName("inicio");

                    b.Property<int>("PeliculaId")
                        .HasColumnType("int")
                        .HasColumnName("pelicula_id");

                    b.Property<int>("SalaId")
                        .HasColumnType("int")
                        .HasColumnName("sala_id");

                    b.HasKey("Id")
                        .HasName("PK__Sesion__3213E83F1FA82287");

                    b.HasIndex("PeliculaId");

                    b.HasIndex("SalaId");

                    b.ToTable("Sesion", (string)null);
                });

            modelBuilder.Entity("Cinematrix.API.Entidades.Tarifa", b =>
                {
                    b.Property<string>("Nombre")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("nombre");

                    b.Property<decimal?>("Precio")
                        .HasColumnType("decimal(4, 2)")
                        .HasColumnName("precio");

                    b.HasKey("Nombre")
                        .HasName("PK__Tarifa__72AFBCC733D2AAC3");

                    b.ToTable("Tarifa", (string)null);
                });

            modelBuilder.Entity("Cinematrix.API.Entidades.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Butaca")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("butaca");

                    b.Property<int>("CompraId")
                        .HasColumnType("int")
                        .HasColumnName("compra_id");

                    b.Property<decimal?>("Importe")
                        .HasColumnType("decimal(4, 2)")
                        .HasColumnName("importe");

                    b.Property<string>("PeliculaTitulo")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("pelicula_titulo");

                    b.Property<string>("SalaNombre")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("sala_nombre");

                    b.Property<DateTime?>("SesionInicio")
                        .HasColumnType("datetime")
                        .HasColumnName("sesion_inicio");

                    b.Property<string>("TarifaNombre")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("tarifa_nombre");

                    b.HasKey("Id")
                        .HasName("PK__Ticket__3213E83FF2CCECBB");

                    b.HasIndex("CompraId");

                    b.ToTable("Ticket", (string)null);
                });

            modelBuilder.Entity("Cinematrix.API.Entidades.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Contrasenia")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("contraseña");

                    b.Property<string>("Correo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("correo");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("nombre");

                    b.Property<int>("RolId")
                        .HasColumnType("int")
                        .HasColumnName("rol_id");

                    b.HasKey("Id")
                        .HasName("PK__Usuario__3213E83F31F84249");

                    b.HasIndex("RolId");

                    b.HasIndex(new[] { "Correo" }, "UQ__Usuario__2A586E0B41E36D91")
                        .IsUnique();

                    b.ToTable("Usuario", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Cinematrix.API.Entidades.Compra", b =>
                {
                    b.HasOne("Cinematrix.API.Entidades.Sesion", "Sesion")
                        .WithMany("Compras")
                        .HasForeignKey("SesionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK__Compra__sesion_i__49C3F6B7");

                    b.Navigation("Sesion");
                });

            modelBuilder.Entity("Cinematrix.API.Entidades.Ocupacion", b =>
                {
                    b.HasOne("Cinematrix.API.Entidades.Compra", "Compra")
                        .WithMany("Ocupaciones")
                        .HasForeignKey("CompraId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK__Ocupacion__compr__571DF1D5");

                    b.HasOne("Cinematrix.API.Entidades.Sesion", "Sesion")
                        .WithMany("Ocupaciones")
                        .HasForeignKey("SesionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK__Ocupacion__sesio__5441852A");

                    b.HasOne("Cinematrix.API.Entidades.Tarifa", "TarifaNombreNavigation")
                        .WithMany("Ocupaciones")
                        .HasForeignKey("TarifaNombre")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK__Ocupacion__tarif__5812160E");

                    b.Navigation("Compra");

                    b.Navigation("Sesion");

                    b.Navigation("TarifaNombreNavigation");
                });

            modelBuilder.Entity("Cinematrix.API.Entidades.Sesion", b =>
                {
                    b.HasOne("Cinematrix.API.Entidades.Pelicula", "Pelicula")
                        .WithMany("Sesiones")
                        .HasForeignKey("PeliculaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK__Sesion__pelicula__403A8C7D");

                    b.HasOne("Cinematrix.API.Entidades.Sala", "Sala")
                        .WithMany("Sesiones")
                        .HasForeignKey("SalaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK__Sesion__sala_id__3F466844");

                    b.Navigation("Pelicula");

                    b.Navigation("Sala");
                });

            modelBuilder.Entity("Cinematrix.API.Entidades.Ticket", b =>
                {
                    b.HasOne("Cinematrix.API.Entidades.Compra", "Compra")
                        .WithMany("Tickets")
                        .HasForeignKey("CompraId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK__Ticket__compra_i__5AEE82B9");

                    b.Navigation("Compra");
                });

            modelBuilder.Entity("Cinematrix.API.Entidades.Usuario", b =>
                {
                    b.HasOne("Cinematrix.API.Entidades.Rol", "Rol")
                        .WithMany("Usuarios")
                        .HasForeignKey("RolId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK__Usuario__rol_id__628FA481");

                    b.Navigation("Rol");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Cinematrix.API.Entidades.Compra", b =>
                {
                    b.Navigation("Ocupaciones");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("Cinematrix.API.Entidades.Pelicula", b =>
                {
                    b.Navigation("Sesiones");
                });

            modelBuilder.Entity("Cinematrix.API.Entidades.Rol", b =>
                {
                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("Cinematrix.API.Entidades.Sala", b =>
                {
                    b.Navigation("Sesiones");
                });

            modelBuilder.Entity("Cinematrix.API.Entidades.Sesion", b =>
                {
                    b.Navigation("Compras");

                    b.Navigation("Ocupaciones");
                });

            modelBuilder.Entity("Cinematrix.API.Entidades.Tarifa", b =>
                {
                    b.Navigation("Ocupaciones");
                });
#pragma warning restore 612, 618
        }
    }
}
